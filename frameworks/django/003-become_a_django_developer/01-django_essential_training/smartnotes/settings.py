"""
Django settings for smartnotes project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
RELOAD_APP_DIR = BASE_DIR / "reload"
assert RELOAD_APP_DIR.is_dir() and RELOAD_APP_DIR.exists()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', '')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',  # for django-browser-reload

    # new after `django-admin startapp ...` command
    'home',
    'notes',
    'reload',  # example of reload pages
    # other 3rd party
    'django_browser_reload' # automatically reload browser in development

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # new
    # The middleware should be listed after any that encode the response, such as Django’s GZipMiddleware.
    # The middleware automatically inserts the required script tag on HTML responses before </body> when DEBUG is True.
    # It does so to every HTML response, meaning it will be included on Django’s debug pages, admin pages, etc. If you want more control, you can instead insert the script tag in your templates—see below.`
    # When DEBUG is True, the template tag includes a small script. This script connects back to the development server and will automatically reload when static assets or templates are modified, or after runserver restarts. (Detecting modification of Django templates requires Django 3.2+.) The reload only happens in the most recently opened tab.

    "django_browser_reload.middleware.BrowserReloadMiddleware",
]

ROOT_URLCONF = 'smartnotes.urls'

TEMPLATES = [
    # stock
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # DIRS defines a list of directories where the engine should look for template source files, in search order.
        'DIRS': [],
        # APP_DIRS tells whether the engine should look for templates inside installed applications. Each backend defines a conventional name for the subdirectory inside applications where its templates should be stored.
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
    # reload
    # {
    #     "BACKEND": "django.template.backends.django.DjangoTemplates",
    #     "DIRS": [RELOAD_APP_DIR / "templates" / "reload" / "django"],
    #     "APP_DIRS": True,
    # },
    {
        "BACKEND": "django.template.backends.jinja2.Jinja2",
        "DIRS": [
            (RELOAD_APP_DIR / "templates" / "reload" / "jinja"),
        ],
        "OPTIONS": {
            "environment": "reload.jinja.environment",
        },
    },
]

WSGI_APPLICATION = 'smartnotes.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# DATABASES: dict[str, dict[str, Any]] = {}
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
    # '/var/www/static/',  # unused
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
