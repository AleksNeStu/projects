{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"domain": "groups.google.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4pmlv9", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "cheemosabe", "media": null, "score": 73, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 14, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/4pmlv9/transaction_oriented_collector_toc_gos_next_gc/", "locked": false, "name": "t3_4pmlv9", "created": 1466800007.0, "url": "https://groups.google.com/forum/#!topic/golang-dev/WcZaqTE51ZU", "author_flair_text": null, "quarantine": false, "title": "Transaction Oriented Collector (TOC) - Go's next GC", "created_utc": 1466771207.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 73}}, {"kind": "t3", "data": {"domain": "gokit.io", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4pmzk3", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "xmattstrongx", "media": null, "score": 25, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 3, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/4pmzk3/new_website_for_gokit/", "locked": false, "name": "t3_4pmzk3", "created": 1466805398.0, "url": "https://gokit.io/", "author_flair_text": null, "quarantine": false, "title": "New website for go-kit", "created_utc": 1466776598.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 25}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4prawf", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "huydotnet", "media": null, "score": 0, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 2, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/4prawf/i_made_an_alternative_for_playground_any_feedback/", "locked": false, "name": "t3_4prawf", "created": 1466863455.0, "url": "https://github.com/huytd/go-play", "author_flair_text": null, "quarantine": false, "title": "I made an alternative for Playground. Any feedback would be greatly appreciated!", "created_utc": 1466834655.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 0}}, {"kind": "t3", "data": {"domain": "appliedgo.net", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4pr9u6", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "ChristophBerger", "media": null, "score": 0, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 2, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/4pr9u6/dependency_injection_in_a_nutshell/", "locked": false, "name": "t3_4pr9u6", "created": 1466862876.0, "url": "https://appliedgo.net/di/", "author_flair_text": null, "quarantine": false, "title": "Dependency Injection in a nutshell", "created_utc": 1466834076.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 0}}, {"kind": "t3", "data": {"domain": "elliot.land", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4pqhac", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "elliotchance", "media": null, "score": 2, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 1, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/4pqhac/datadriven_or_parameterized_tests/", "locked": false, "name": "t3_4pqhac", "created": 1466849027.0, "url": "http://elliot.land/go-data-driven-parameterized-tests", "author_flair_text": null, "quarantine": false, "title": "Data-Driven or Parameterized Tests", "created_utc": 1466820227.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 2}}, {"kind": "t3", "data": {"domain": "dave.cheney.net", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4plkn2", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "computesomething", "media": null, "score": 50, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 19, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/4plkn2/gophers_please_tag_your_releases/", "locked": false, "name": "t3_4plkn2", "created": 1466780442.0, "url": "http://dave.cheney.net/2016/06/24/gophers-please-tag-your-releases", "author_flair_text": null, "quarantine": false, "title": "Gophers, please tag your releases", "created_utc": 1466751642.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 50}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;As someone who does most of my programming in Python, I can see significant advantages to moving some projects to Go. I could really benefit from concurrency, better performance and static binary deployment.&lt;/p&gt;\n\n&lt;p&gt;However, I am worried about relying on a language which is dominated by a single company. Unlike the community-led development of Python, the lead developers of Go all seem to be employed by Google to work on the language. Does it concern you that Go is managed by a single company rather than an independent &amp;quot;foundation&amp;quot;?&lt;/p&gt;\n\n&lt;p&gt;Also, if Go is run &amp;quot;by Google&amp;quot;, is it run &amp;quot;for Google&amp;quot;? How willing have the developers been to accommodate the needs of users outside Google?&lt;/p&gt;\n\n&lt;p&gt;Finally, do you think it is possible that Google will drop support for Go, as they have for many other projects? If that were to happen, how would you expect the language to fare?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "As someone who does most of my programming in Python, I can see significant advantages to moving some projects to Go. I could really benefit from concurrency, better performance and static binary deployment.\n\nHowever, I am worried about relying on a language which is dominated by a single company. Unlike the community-led development of Python, the lead developers of Go all seem to be employed by Google to work on the language. Does it concern you that Go is managed by a single company rather than an independent \"foundation\"?\n\nAlso, if Go is run \"by Google\", is it run \"for Google\"? How willing have the developers been to accommodate the needs of users outside Google?\n\nFinally, do you think it is possible that Google will drop support for Go, as they have for many other projects? If that were to happen, how would you expect the language to fare?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4plf83", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "bakery2k", "media": null, "score": 12, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 42, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/4plf83/is_go_developed_by_google_for_google/", "locked": false, "name": "t3_4plf83", "created": 1466777723.0, "url": "https://www.reddit.com/r/golang/comments/4plf83/is_go_developed_by_google_for_google/", "author_flair_text": null, "quarantine": false, "title": "Is Go developed \"by Google, for Google\"?", "created_utc": 1466748923.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 12}}, {"kind": "t3", "data": {"domain": "medium.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4pjsyi", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "cep221", "media": null, "score": 19, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 13, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/4pjsyi/preemptive_interface_antipattern_in_go/", "locked": false, "name": "t3_4pjsyi", "created": 1466754505.0, "url": "https://medium.com/@cep21/preemptive-interface-anti-pattern-in-go-54c18ac0668a", "author_flair_text": null, "quarantine": false, "title": "Preemptive Interface Anti-Pattern in Go", "created_utc": 1466725705.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 19}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4pjqzl", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "jtolds", "media": null, "score": 11, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 0, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/4pjqzl/monkit_tracing_and_metrics_library_for_go/", "locked": false, "name": "t3_4pjqzl", "created": 1466753715.0, "url": "https://github.com/spacemonkeygo/monkit", "author_flair_text": null, "quarantine": false, "title": "Monkit: Tracing and metrics library for Go", "created_utc": 1466724915.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 11}}, {"kind": "t3", "data": {"domain": "nats.io", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4pm4xk", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "bjflanne", "media": null, "score": 1, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 0, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/4pm4xk/micro_on_nats_microservices_with_messaging/", "locked": false, "name": "t3_4pm4xk", "created": 1466791689.0, "url": "http://nats.io/blog/microonnats/", "author_flair_text": null, "quarantine": false, "title": "Micro on NATS - Microservices with Messaging", "created_utc": 1466762889.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 1}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I want to send various emails from my website such as registration verification emails, password reset etc. All emails that should be sent on user request. &lt;/p&gt;\n\n&lt;p&gt;My current solution is to send emails from within my request handler functions, however that has resulted in long response times on those requests.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;d thought of spinning up a separate routine and handling emails there, but if they fail, the server then wouldn&amp;#39;t be able to respond with an error and the user would be none the wiser.&lt;/p&gt;\n\n&lt;p&gt;The other idea would be to have a database table that stores records of emails to be sent and a separate application that routinely checks that table for emails to be sent and goes ahead with them.&lt;/p&gt;\n\n&lt;p&gt;What are your approaches for emailing from your websites?&lt;/p&gt;\n\n&lt;p&gt;EDIT: I&amp;#39;m using the SendGrid API to send emails from my website. That&amp;#39;s what&amp;#39;s causing response times to add up.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I want to send various emails from my website such as registration verification emails, password reset etc. All emails that should be sent on user request. \n\nMy current solution is to send emails from within my request handler functions, however that has resulted in long response times on those requests.\n\nI'd thought of spinning up a separate routine and handling emails there, but if they fail, the server then wouldn't be able to respond with an error and the user would be none the wiser.\n\nThe other idea would be to have a database table that stores records of emails to be sent and a separate application that routinely checks that table for emails to be sent and goes ahead with them.\n\nWhat are your approaches for emailing from your websites?\n\nEDIT: I'm using the SendGrid API to send emails from my website. That's what's causing response times to add up.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4pk7zk", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "danhardman", "media": null, "score": 4, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 9, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": 1466771714.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/4pk7zk/when_should_i_send_emails_from_my_website/", "locked": false, "name": "t3_4pk7zk", "created": 1466760338.0, "url": "https://www.reddit.com/r/golang/comments/4pk7zk/when_should_i_send_emails_from_my_website/", "author_flair_text": null, "quarantine": false, "title": "When should I send emails from my website?", "created_utc": 1466731538.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 4}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4plu8o", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "nilium", "media": null, "score": 1, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 2, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/4plu8o/jsondir_a_tool_to_build_json_from_directory_trees/", "locked": false, "name": "t3_4plu8o", "created": 1466785568.0, "url": "https://github.com/nilium/jsondir", "author_flair_text": null, "quarantine": false, "title": "jsondir: a tool to build JSON from directory trees", "created_utc": 1466756768.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 1}}, {"kind": "t3", "data": {"domain": "xph.us", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4plr12", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "_ak", "media": null, "score": 1, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 0, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/4plr12/package_versions_in_go/", "locked": false, "name": "t3_4plr12", "created": 1466783729.0, "url": "https://xph.us/2016/06/24/package-versions-in-go.html", "author_flair_text": null, "quarantine": false, "title": "Package Versions in Go", "created_utc": 1466754929.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 1}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am looking for pointers or examples that would point me in the right direction in using something such as redis cluster or aerospike at scale using golang. &lt;/p&gt;\n\n&lt;p&gt;I have tried a bunch of methods and variations but seem to always end up with performance similar to that of using something such as PHP. &lt;/p&gt;\n\n&lt;p&gt;Though minus something like redis, it far exceeds its counterpart in php.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I am looking for pointers or examples that would point me in the right direction in using something such as redis cluster or aerospike at scale using golang. \n\nI have tried a bunch of methods and variations but seem to always end up with performance similar to that of using something such as PHP. \n\nThough minus something like redis, it far exceeds its counterpart in php.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4pkmh0", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "nastus", "media": null, "score": 2, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 6, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/4pkmh0/dealing_with_a_cache_such_as_redis_at_scale/", "locked": false, "name": "t3_4pkmh0", "created": 1466765995.0, "url": "https://www.reddit.com/r/golang/comments/4pkmh0/dealing_with_a_cache_such_as_redis_at_scale/", "author_flair_text": null, "quarantine": false, "title": "Dealing with a cache such as redis, at scale?", "created_utc": 1466737195.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 2}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m just getting started with Go and I can see that there are a lot of ways to do this. What are the most common ways to do this, or which way/s has the most official support?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I'm just getting started with Go and I can see that there are a lot of ways to do this. What are the most common ways to do this, or which way/s has the most official support?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4pg58h", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "jaetteintemer", "media": null, "score": 25, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 55, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/4pg58h/best_way_to_manage_dependencies/", "locked": false, "name": "t3_4pg58h", "created": 1466708053.0, "url": "https://www.reddit.com/r/golang/comments/4pg58h/best_way_to_manage_dependencies/", "author_flair_text": null, "quarantine": false, "title": "Best way to manage dependencies?", "created_utc": 1466679253.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 25}}, {"kind": "t3", "data": {"domain": "blog.gravitational.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4pi4hh", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "dontwantanaccounttt", "media": null, "score": 3, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 0, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/4pi4hh/teleport_modern_clusterfriendly_ssh_server_10/", "locked": false, "name": "t3_4pi4hh", "created": 1466733910.0, "url": "http://blog.gravitational.com/gravitational-teleport-1-0-released/", "author_flair_text": null, "quarantine": false, "title": "Teleport: Modern cluster-friendly SSH server, 1.0 release", "created_utc": 1466705110.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 3}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have an example program where given a padded aes-encrypted ciphertext and a key, it outputs the decrypted url. Knowing that the input is padded via Pkcs7, I assumed that I would have to unpad the output. However, the program still produces the correct output, regardless of whether I unpad it or not.    &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func main() {\n    ciphertext := ciphertext(b64_cipher)\n\n    iv := iv(vector)\n\n    key := sha(secret)\n\n    block, _ := aes.NewCipher(key[:])\n    mode := cipher.NewCBCDecrypter(block, iv)\n    mode.CryptBlocks(ciphertext, ciphertext)\n\n    url := fmt.Sprintf(&amp;quot;%s&amp;quot;,ciphertext)\n    fmt.Println(url) // This works for a padded input!\n}    \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Does the standard library&amp;#39;s &lt;a href=\"https://golang.org/pkg/crypto/cipher/#NewCBCDecrypter\"&gt;CBC decrypter&lt;/a&gt; automatically unpad the output? Forgive me for sounding noobish, but what is the reason behind it? Thanks&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I have an example program where given a padded aes-encrypted ciphertext and a key, it outputs the decrypted url. Knowing that the input is padded via Pkcs7, I assumed that I would have to unpad the output. However, the program still produces the correct output, regardless of whether I unpad it or not.    \n\n    func main() {\n\t    ciphertext := ciphertext(b64_cipher)\n\n\t    iv := iv(vector)\n\n\t    key := sha(secret)\n\n\t    block, _ := aes.NewCipher(key[:])\n\t    mode := cipher.NewCBCDecrypter(block, iv)\n\t    mode.CryptBlocks(ciphertext, ciphertext)\n\n\t    url := fmt.Sprintf(\"%s\",ciphertext)\n\t    fmt.Println(url) // This works for a padded input!\n    }    \n\nDoes the standard library's [CBC decrypter](https://golang.org/pkg/crypto/cipher/#NewCBCDecrypter) automatically unpad the output? Forgive me for sounding noobish, but what is the reason behind it? Thanks", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4pkj67", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "smasher164", "media": null, "score": 1, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 4, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/4pkj67/is_pkcs7_the_default_padding_for_newcbcdecrypter/", "locked": false, "name": "t3_4pkj67", "created": 1466764732.0, "url": "https://www.reddit.com/r/golang/comments/4pkj67/is_pkcs7_the_default_padding_for_newcbcdecrypter/", "author_flair_text": null, "quarantine": false, "title": "Is Pkcs7 the default padding for NewCBCDecrypter?", "created_utc": 1466735932.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 1}}, {"kind": "t3", "data": {"domain": "dinosaurscode.xyz", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4phfr3", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "xDinomode", "media": null, "score": 6, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 1, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/4phfr3/sending_email_with_golang_and_gmails_api/", "locked": false, "name": "t3_4phfr3", "created": 1466726345.0, "url": "https://dinosaurscode.xyz/go/2016/06/23/golang-and-google-gmail-api/", "author_flair_text": null, "quarantine": false, "title": "Sending Email With Golang and Gmail's API", "created_utc": 1466697545.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 6}}, {"kind": "t3", "data": {"domain": "blog.loadimpact.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4pgwiw", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "GrantEngle", "media": null, "score": 7, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 6, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/4pgwiw/random_thoughts_about_go_from_someone_whos_new_to/", "locked": false, "name": "t3_4pgwiw", "created": 1466719664.0, "url": "http://blog.loadimpact.com/random-thoughts-about-go", "author_flair_text": null, "quarantine": false, "title": "Random thoughts about Go (from someone who's new to the language)", "created_utc": 1466690864.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 7}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have about 5 small APIs written in Go that sit behind an NGINX proxy inside of a Vagrant box. Works nicely for local development, but I&amp;#39;d like to make it a little easier on us. Is there any way to watch the files in these directories and restart them on a file change while running them as daemons? &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I have about 5 small APIs written in Go that sit behind an NGINX proxy inside of a Vagrant box. Works nicely for local development, but I'd like to make it a little easier on us. Is there any way to watch the files in these directories and restart them on a file change while running them as daemons? ", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4pgipb", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "no_coats", "media": null, "score": 5, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 11, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/4pgipb/is_there_a_pm2_or_forever_equivalent/", "locked": false, "name": "t3_4pgipb", "created": 1466714339.0, "url": "https://www.reddit.com/r/golang/comments/4pgipb/is_there_a_pm2_or_forever_equivalent/", "author_flair_text": null, "quarantine": false, "title": "Is there a pm2 or forever equivalent?", "created_utc": 1466685539.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 5}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi Everyone! &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m here to share with you guys my variadic docker container that I&amp;#39;m using to develop go apps. There is more detailed description on the page about usage. You have a base image, which is Alpine based, and then you build your own Dockerfile and specify the repo and user you want as build arguments. So you will have a container per repo. And I&amp;#39;m using &lt;a href=\"https://github.com/Masterminds/glide\"&gt;Glide&lt;/a&gt; as a dependency management tool.&lt;/p&gt;\n\n&lt;p&gt;You will have a clean environment to work with. Some tools that are installed include, mc, lynx, vim-go.&lt;/p&gt;\n\n&lt;p&gt;I was using a VM for a very long time, but now, with Docker Beta running on Mac, it&amp;#39;s trivial to use containers. The base image is ~421MB with everything installed.&lt;/p&gt;\n\n&lt;p&gt;I hope it helps. Enjoy, any comments are very welcomed. :) &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://hub.docker.com/r/skarlso/godevbase/\"&gt;https://hub.docker.com/r/skarlso/godevbase/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Here is an example container which I&amp;#39;m using for Hugo development =&amp;gt; &lt;a href=\"https://hub.docker.com/r/skarlso/godevhugo/\"&gt;https://hub.docker.com/r/skarlso/godevhugo/&lt;/a&gt;. The image is ~544MBs. It&amp;#39;s pretty neat. :)&lt;/p&gt;\n\n&lt;p&gt;Cheers!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hi Everyone! \n\nI'm here to share with you guys my variadic docker container that I'm using to develop go apps. There is more detailed description on the page about usage. You have a base image, which is Alpine based, and then you build your own Dockerfile and specify the repo and user you want as build arguments. So you will have a container per repo. And I'm using [Glide](https://github.com/Masterminds/glide) as a dependency management tool.\n\nYou will have a clean environment to work with. Some tools that are installed include, mc, lynx, vim-go.\n\nI was using a VM for a very long time, but now, with Docker Beta running on Mac, it's trivial to use containers. The base image is ~421MB with everything installed.\n\nI hope it helps. Enjoy, any comments are very welcomed. :) \n\n\nhttps://hub.docker.com/r/skarlso/godevbase/\n\nHere is an example container which I'm using for Hugo development =&gt; https://hub.docker.com/r/skarlso/godevhugo/. The image is ~544MBs. It's pretty neat. :)\n\n\nCheers!", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4pijxk", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "skarlso", "media": null, "score": 0, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 5, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": 1466712553.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/4pijxk/variadic_go_dev_containers_for_development/", "locked": false, "name": "t3_4pijxk", "created": 1466738744.0, "url": "https://www.reddit.com/r/golang/comments/4pijxk/variadic_go_dev_containers_for_development/", "author_flair_text": null, "quarantine": false, "title": "Variadic Go Dev Containers for Development", "created_utc": 1466709944.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 0}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4pejhz", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "seojoeschmo", "media": null, "score": 15, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 2, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/4pejhz/bbc_good_food_scraper_in_go/", "locked": false, "name": "t3_4pejhz", "created": 1466678582.0, "url": "https://github.com/sleepypikachu/still-good-food", "author_flair_text": null, "quarantine": false, "title": "BBC Good Food Scraper in Go", "created_utc": 1466649782.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 15}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m learning go and my code is full of this: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;   if err != nil {\n        // something\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Is that right? It seems like a lot of repetition.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I'm learning go and my code is full of this: \n    \n       if err != nil {\n            // something\n        }\n    \nIs that right? It seems like a lot of repetition.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4pg2qs", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "binaryplease", "media": null, "score": 3, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 19, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/4pg2qs/right_way_to_check_for_errors/", "locked": false, "name": "t3_4pg2qs", "created": 1466706748.0, "url": "https://www.reddit.com/r/golang/comments/4pg2qs/right_way_to_check_for_errors/", "author_flair_text": null, "quarantine": false, "title": "Right way to check for errors", "created_utc": 1466677948.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 3}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4pgnjw", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "mustafaakin", "media": null, "score": 0, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 3, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/4pgnjw/an_opinionated_web_framework_with_di_and_param/", "locked": false, "name": "t3_4pgnjw", "created": 1466716271.0, "url": "https://www.github.com/mustafaakin/gongular", "author_flair_text": null, "quarantine": false, "title": "An opinionated web framework with DI and Param handling", "created_utc": 1466687471.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 0}}, {"kind": "t3", "data": {"domain": "nats.io", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "4pbpn4", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "bjflanne", "media": null, "score": 13, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 2, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/4pbpn4/docker_compose_nats_microservices_development/", "locked": false, "name": "t3_4pbpn4", "created": 1466643504.0, "url": "http://nats.io/blog/docker-compose-plus-nats/", "author_flair_text": null, "quarantine": false, "title": "Docker Compose + NATS: Microservices Development Made Easy", "created_utc": 1466614704.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 13}}], "after": "t3_4pbpn4", "before": null}}